// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokemonGO.Persistance.Data;

#nullable disable

namespace PokemonGO.Persistance.Migrations
{
    [DbContext(typeof(PokemonDB))]
    partial class PokemonDBModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PokemonGO.Domain.Entity.AbilityLevel", b =>
                {
                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.Property<int>("BaseAbilityId")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("PokemonId", "BaseAbilityId");

                    b.HasIndex("BaseAbilityId");

                    b.ToTable("AbilityLevel");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.BaseAbility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.Property<int?>("TrainerPokemonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SpeciesId");

                    b.HasIndex("TrainerPokemonId");

                    b.ToTable("BaseAbilities");

                    b.HasDiscriminator().HasValue("BaseAbility");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Gym", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LeaderTrainerId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocationsId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LeaderTrainerId");

                    b.HasIndex("LocationsId");

                    b.ToTable("Gyms");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("WinnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WinnerId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DefaultAtack")
                        .HasColumnType("int");

                    b.Property<int>("DefaultDefense")
                        .HasColumnType("int");

                    b.Property<int>("DefaultHP")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Pokemons");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.PokemonAbility", b =>
                {
                    b.Property<int>("TrainerPokemonId")
                        .HasColumnType("int");

                    b.Property<int>("BaseAbilityId")
                        .HasColumnType("int");

                    b.HasKey("TrainerPokemonId", "BaseAbilityId");

                    b.HasIndex("BaseAbilityId");

                    b.ToTable("PokemonAssignAbilities");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Specie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Species");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.SpecieEffect", b =>
                {
                    b.Property<int>("AttackSpecieId")
                        .HasColumnType("int");

                    b.Property<int>("DefenseSpecieId")
                        .HasColumnType("int");

                    b.Property<int>("MultiplierType")
                        .HasColumnType("int");

                    b.HasKey("AttackSpecieId", "DefenseSpecieId");

                    b.HasIndex("DefenseSpecieId");

                    b.ToTable("SpecieEffects");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Trainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId1")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("LocationId1");

                    b.HasIndex("UserId");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.TrainerPokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CurrentHp")
                        .HasColumnType("int");

                    b.Property<int?>("GymId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShiny")
                        .HasColumnType("bit");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("PokemonId")
                        .HasColumnType("int");

                    b.Property<int>("PokemonType")
                        .HasColumnType("int");

                    b.Property<int>("TrainerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GymId");

                    b.HasIndex("PokemonId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerPokemons");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("PokemonSpecie", b =>
                {
                    b.Property<int>("PokemonsId")
                        .HasColumnType("int");

                    b.Property<int>("SpeciesId")
                        .HasColumnType("int");

                    b.HasKey("PokemonsId", "SpeciesId");

                    b.HasIndex("SpeciesId");

                    b.ToTable("PokemonSpecie");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.ActiveAbility", b =>
                {
                    b.HasBaseType("PokemonGO.Domain.Entity.BaseAbility");

                    b.Property<int>("AttackEffective")
                        .HasColumnType("int");

                    b.Property<int>("CoolDown")
                        .HasColumnType("int");

                    b.Property<int>("DefenseEffective")
                        .HasColumnType("int");

                    b.Property<int>("HealthEffective")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("ActiveAbility");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.PassiveAbility", b =>
                {
                    b.HasBaseType("PokemonGO.Domain.Entity.BaseAbility");

                    b.Property<int>("AttackEffective")
                        .HasColumnType("int");

                    b.Property<int>("DefenseEffective")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("HealthEffective")
                        .HasColumnType("int");

                    b.Property<int>("OpponentAttack")
                        .HasColumnType("int");

                    b.Property<int>("OpponentDefense")
                        .HasColumnType("int");

                    b.Property<int>("OpponentHealth")
                        .HasColumnType("int");

                    b.ToTable("BaseAbilities", t =>
                        {
                            t.Property("AttackEffective")
                                .HasColumnName("PassiveAbility_AttackEffective");

                            t.Property("DefenseEffective")
                                .HasColumnName("PassiveAbility_DefenseEffective");

                            t.Property("HealthEffective")
                                .HasColumnName("PassiveAbility_HealthEffective");
                        });

                    b.HasDiscriminator().HasValue("PassiveAbility");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.StatusAbility", b =>
                {
                    b.HasBaseType("PokemonGO.Domain.Entity.BaseAbility");

                    b.Property<bool>("IsAttackEffective")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefenseEffective")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHealthEffective")
                        .HasColumnType("bit");

                    b.Property<int>("StatusAbilityTypes")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("StatusAbility");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.AbilityLevel", b =>
                {
                    b.HasOne("PokemonGO.Domain.Entity.BaseAbility", "BaseAbility")
                        .WithMany("AbilityLevels")
                        .HasForeignKey("BaseAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGO.Domain.Entity.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseAbility");

                    b.Navigation("Pokemon");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.BaseAbility", b =>
                {
                    b.HasOne("PokemonGO.Domain.Entity.Specie", "Species")
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGO.Domain.Entity.TrainerPokemon", null)
                        .WithMany("Abilities")
                        .HasForeignKey("TrainerPokemonId");

                    b.Navigation("Species");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Gym", b =>
                {
                    b.HasOne("PokemonGO.Domain.Entity.Trainer", "LeaderTrainer")
                        .WithMany()
                        .HasForeignKey("LeaderTrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGO.Domain.Entity.Location", "Locations")
                        .WithMany("Gyms")
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeaderTrainer");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Location", b =>
                {
                    b.HasOne("PokemonGO.Domain.Entity.Trainer", "Winner")
                        .WithMany()
                        .HasForeignKey("WinnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Winner");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.PokemonAbility", b =>
                {
                    b.HasOne("PokemonGO.Domain.Entity.BaseAbility", "BaseAbility")
                        .WithMany()
                        .HasForeignKey("BaseAbilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGO.Domain.Entity.TrainerPokemon", "TrainerPokemon")
                        .WithMany("PokemonAbilities")
                        .HasForeignKey("TrainerPokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BaseAbility");

                    b.Navigation("TrainerPokemon");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.SpecieEffect", b =>
                {
                    b.HasOne("PokemonGO.Domain.Entity.Specie", "AttackSpecie")
                        .WithMany()
                        .HasForeignKey("AttackSpecieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGO.Domain.Entity.Specie", "DefenseSpecie")
                        .WithMany()
                        .HasForeignKey("DefenseSpecieId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AttackSpecie");

                    b.Navigation("DefenseSpecie");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Trainer", b =>
                {
                    b.HasOne("PokemonGO.Domain.Entity.Location", null)
                        .WithMany("EliteFour")
                        .HasForeignKey("LocationId");

                    b.HasOne("PokemonGO.Domain.Entity.Location", null)
                        .WithMany("Trainers")
                        .HasForeignKey("LocationId1");

                    b.HasOne("PokemonGO.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.TrainerPokemon", b =>
                {
                    b.HasOne("PokemonGO.Domain.Entity.Gym", null)
                        .WithMany("Guards")
                        .HasForeignKey("GymId");

                    b.HasOne("PokemonGO.Domain.Entity.Pokemon", "Pokemon")
                        .WithMany("TrainerPokemons")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGO.Domain.Entity.Trainer", "Trainer")
                        .WithMany("TrainerPokemons")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pokemon");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("PokemonSpecie", b =>
                {
                    b.HasOne("PokemonGO.Domain.Entity.Pokemon", null)
                        .WithMany()
                        .HasForeignKey("PokemonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PokemonGO.Domain.Entity.Specie", null)
                        .WithMany()
                        .HasForeignKey("SpeciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.BaseAbility", b =>
                {
                    b.Navigation("AbilityLevels");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Gym", b =>
                {
                    b.Navigation("Guards");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Location", b =>
                {
                    b.Navigation("EliteFour");

                    b.Navigation("Gyms");

                    b.Navigation("Trainers");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Pokemon", b =>
                {
                    b.Navigation("TrainerPokemons");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.Trainer", b =>
                {
                    b.Navigation("TrainerPokemons");
                });

            modelBuilder.Entity("PokemonGO.Domain.Entity.TrainerPokemon", b =>
                {
                    b.Navigation("Abilities");

                    b.Navigation("PokemonAbilities");
                });
#pragma warning restore 612, 618
        }
    }
}
